-- Insert Synthetic Customers (1000)
   INSERT INTO BANKING.CUSTOMERS (CUSTOMER_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE, ADDRESS, DATE_OF_BIRTH, INCOME, OCCUPATION, CREATED_DATE)
   SELECT
       'C' || TO_VARCHAR(SEQ8(), '0000000000') AS CUSTOMER_ID,
       'First' || TO_VARCHAR(UNIFORM(1, 1000, RANDOM()), '0000') AS FIRST_NAME,
       'Last' || TO_VARCHAR(UNIFORM(1, 1000, RANDOM()), '0000') AS LAST_NAME,
       LOWER('first' || UNIFORM(1, 1000, RANDOM()) || '.last' || UNIFORM(1, 1000, RANDOM()) || '@varo.com') AS EMAIL,
       '555-' || LPAD(TO_VARCHAR(UNIFORM(0, 9999, RANDOM()), '0000'), 4, '0') || '-' || LPAD(TO_VARCHAR(UNIFORM(0, 9999, RANDOM()), '0000'), 4, '0') AS PHONE,
       TO_VARCHAR(UNIFORM(100, 999, RANDOM())) || ' Main St, City ' || TO_VARCHAR(SEQ8(), '000') AS ADDRESS,
       DATEADD(YEAR, -UNIFORM(18, 80, RANDOM()), CURRENT_DATE()) AS DATE_OF_BIRTH,
       UNIFORM(30000, 150000, RANDOM()) / 100.0 AS INCOME,
       CASE UNIFORM(1, 5, RANDOM())
           WHEN 1 THEN 'Engineer'
           WHEN 2 THEN 'Teacher'
           WHEN 3 THEN 'Doctor'
           WHEN 4 THEN 'Artist'
           ELSE 'Manager'
       END AS OCCUPATION,
       DATEADD(DAY, -UNIFORM(0, 1000, RANDOM()), CURRENT_TIMESTAMP()) AS CREATED_DATE
   FROM TABLE(GENERATOR(ROWCOUNT => 1000));

   -- Insert Synthetic Accounts (~2000, 2 per customer)
   INSERT INTO BANKING.ACCOUNTS (ACCOUNT_ID, CUSTOMER_ID, ACCOUNT_TYPE, BALANCE, INTEREST_RATE, OPEN_DATE, STATUS)
   SELECT
       'A' || TO_VARCHAR(SEQ8(), '0000000000') AS ACCOUNT_ID,
       CUSTOMER_ID,
       IFF(UNIFORM(1, 2, RANDOM()) = 1, 'Checking', 'Savings') AS ACCOUNT_TYPE,
       UNIFORM(100, 100000, RANDOM()) / 100.0 AS BALANCE,
       UNIFORM(0.5, 5.0, RANDOM()) / 100.0 AS INTEREST_RATE,
       DATEADD(DAY, -UNIFORM(0, 365, RANDOM()), CURRENT_DATE()) AS OPEN_DATE,
       'Active' AS STATUS
   FROM BANKING.CUSTOMERS
   CROSS JOIN TABLE(GENERATOR(ROWCOUNT => 2));

   -- Insert Synthetic Transactions (~100,000, 50 per account, with ~1% IS_FRAUD)
   INSERT INTO BANKING.TRANSACTIONS (TRANSACTION_ID, ACCOUNT_ID, TRANSACTION_TYPE, AMOUNT, TRANSACTION_DATE, DESCRIPTION, CATEGORY, IS_FRAUD)
   SELECT
       'T' || TO_VARCHAR(SEQ8(), '0000000000') AS TRANSACTION_ID,
       ACCOUNT_ID,
       CASE UNIFORM(1, 3, RANDOM())
           WHEN 1 THEN 'Deposit'
           WHEN 2 THEN 'Withdrawal'
           ELSE 'Transfer'
       END AS TRANSACTION_TYPE,
       (UNIFORM(10, 1000, RANDOM()) / 100.0) * IFF(TRANSACTION_TYPE = 'Withdrawal', -1, 1) AS AMOUNT,
       DATEADD(DAY, -UNIFORM(0, 90, RANDOM()), CURRENT_TIMESTAMP()) AS TRANSACTION_DATE,
       'Transaction desc ' || TO_VARCHAR(SEQ8(), '000') AS DESCRIPTION,
       CASE UNIFORM(1, 5, RANDOM())
           WHEN 1 THEN 'Groceries'
           WHEN 2 THEN 'Utilities'
           WHEN 3 THEN 'Salary'
           WHEN 4 THEN 'Entertainment'
           ELSE 'Travel'
       END AS CATEGORY,
       IFF(UNIFORM(1, 100, RANDOM()) <= 1, TRUE, FALSE) AS IS_FRAUD
   FROM BANKING.ACCOUNTS
   CROSS JOIN TABLE(GENERATOR(ROWCOUNT => 50));

   -- Insert Synthetic Customer Feedback (~5000, 5 per customer)
   INSERT INTO BANKING.CUSTOMER_FEEDBACK (FEEDBACK_ID, CUSTOMER_ID, FEEDBACK_TEXT, FEEDBACK_DATE, SENTIMENT)
   SELECT
       'F' || TO_VARCHAR(SEQ8(), '0000000000') AS FEEDBACK_ID,
       CUSTOMER_ID,
       CASE UNIFORM(1, 4, RANDOM())
           WHEN 1 THEN 'Great service and easy to use app!'
           WHEN 2 THEN 'App crashes often, needs improvement.'
           WHEN 3 THEN 'Fast transfers but high fees.'
           ELSE 'Neutral experience with banking features.'
       END AS FEEDBACK_TEXT,
       DATEADD(DAY, -UNIFORM(0, 365, RANDOM()), CURRENT_TIMESTAMP()) AS FEEDBACK_DATE,
       CASE UNIFORM(1, 3, RANDOM())
           WHEN 1 THEN 'Positive'
           WHEN 2 THEN 'Negative'
           ELSE 'Neutral'
       END AS SENTIMENT
   FROM BANKING.CUSTOMERS
   CROSS JOIN TABLE(GENERATOR(ROWCOUNT => 5));

   -- Insert Synthetic Loans (~1500, 1-2 per customer)
   INSERT INTO BANKING.LOANS (LOAN_ID, CUSTOMER_ID, LOAN_TYPE, LOAN_AMOUNT, INTEREST_RATE, TERM_MONTHS, START_DATE, STATUS)
   SELECT
       'L' || TO_VARCHAR(SEQ8(), '0000000000') AS LOAN_ID,
       CUSTOMER_ID,
       CASE UNIFORM(1, 3, RANDOM())
           WHEN 1 THEN 'Personal'
           WHEN 2 THEN 'Auto'
           ELSE 'Mortgage'
       END AS LOAN_TYPE,
       UNIFORM(5000, 500000, RANDOM()) / 100.0 AS LOAN_AMOUNT,
       UNIFORM(3.0, 7.0, RANDOM()) / 100.0 AS INTEREST_RATE,
       UNIFORM(12, 360, RANDOM()) AS TERM_MONTHS,
       DATEADD(DAY, -UNIFORM(0, 365, RANDOM()), CURRENT_DATE()) AS START_DATE,
       CASE UNIFORM(1, 3, RANDOM())
           WHEN 1 THEN 'Active'
           WHEN 2 THEN 'Paid Off'
           ELSE 'Defaulted'
       END AS STATUS
   FROM BANKING.CUSTOMERS
   CROSS JOIN TABLE(GENERATOR(ROWCOUNT => UNIFORM(1, 2, RANDOM())));

   -- Insert Synthetic Credit Cards (~1500, 1-2 per customer)
   INSERT INTO BANKING.CREDIT_CARDS (CARD_ID, CUSTOMER_ID, CREDIT_LIMIT, CURRENT_BALANCE, DUE_DATE, MIN_PAYMENT, INTEREST_RATE, ISSUE_DATE, STATUS)
   SELECT
       'CC' || TO_VARCHAR(SEQ8(), '0000000000') AS CARD_ID,
       CUSTOMER_ID,
       UNIFORM(1000, 50000, RANDOM()) / 100.0 AS CREDIT_LIMIT,
       UNIFORM(0, CREDIT_LIMIT * 0.8, RANDOM()) / 100.0 AS CURRENT_BALANCE,
       DATEADD(DAY, UNIFORM(1, 28, RANDOM()), CURRENT_DATE()) AS DUE_DATE,
       UNIFORM(10, 100, RANDOM()) / 100.0 AS MIN_PAYMENT,
       UNIFORM(15.0, 25.0, RANDOM()) / 100.0 AS INTEREST_RATE,
       DATEADD(DAY, -UNIFORM(0, 365, RANDOM()), CURRENT_DATE()) AS ISSUE_DATE,
       'Active' AS STATUS
   FROM BANKING.CUSTOMERS
   CROSS JOIN TABLE(GENERATOR(ROWCOUNT => UNIFORM(1, 2, RANDOM())));

   -- Insert Synthetic Fraud Detection (~10,000, ~10% of transactions)
   INSERT INTO BANKING.FRAUD_DETECTION (FRAUD_ID, TRANSACTION_ID, CUSTOMER_ID, DETECTION_DATE, FRAUD_TYPE, RISK_SCORE, STATUS)
   SELECT
       'FD' || TO_VARCHAR(SEQ8(), '0000000000') AS FRAUD_ID,
       t.TRANSACTION_ID,
       a.CUSTOMER_ID,
       DATEADD(HOUR, UNIFORM(0, 24, RANDOM()), t.TRANSACTION_DATE) AS DETECTION_DATE,
       CASE UNIFORM(1, 3, RANDOM())
           WHEN 1 THEN 'Unauthorized'
           WHEN 2 THEN 'Suspicious Amount'
           ELSE 'Duplicate Transaction'
       END AS FRAUD_TYPE,
       UNIFORM(50, 100, RANDOM()) / 100.0 AS RISK_SCORE,
       CASE UNIFORM(1, 3, RANDOM())
           WHEN 1 THEN 'Suspected'
           WHEN 2 THEN 'Confirmed'
           ELSE 'Resolved'
       END AS STATUS
   FROM (
       SELECT TRANSACTION_ID, ACCOUNT_ID, TRANSACTION_DATE
       FROM BANKING.TRANSACTIONS
       SAMPLE (10)  -- ~10% of transactions
       LIMIT 10000
   ) t
   JOIN BANKING.ACCOUNTS a ON t.ACCOUNT_ID = a.ACCOUNT_ID;